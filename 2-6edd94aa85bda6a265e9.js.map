{"version":3,"sources":["webpack:///./src/components/image-carousel.js","webpack:///./src/pages/roomImages.js"],"names":["ImageCarousel","props","_this","_React$Component","call","this","state","currentImageIndex","lastIndex","images","edges","length","nextSlide","bind","assertThisInitialized_default","previousSlide","getDerivedStateFromProps","nextProps","prevState","index","setState","render","console","log","react_default","a","createElement","style","position","gatsby_image_default","fluid","node","childImageSharp","image_carousel_LeftArrow","handleClick","glyph","image_carousel_RightArrow","React","Component","LeftArrow","_ref","color","cursor","fontSize","top","left","onClick","RightArrow","_ref2","right","minHeight","roomsList","map","room","key","RoomImages","data","_3006458300","_useState","useState","dormImages","setRoom","event","target","innerText","kingImages","gardenImages","sharedImages","patioImages","image_carousel"],"mappings":"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","file":"2-6edd94aa85bda6a265e9.js","sourcesContent":["import React from 'react';\nimport Img from 'gatsby-image';\n\nclass ImageCarousel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentImageIndex: 0,\n      lastIndex: this.props.images.edges.length - 1,\n    };\n    this.nextSlide = this.nextSlide.bind(this);\n    this.previousSlide = this.previousSlide.bind(this);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.images.edges.length - 1 !== prevState.lastIndex) {\n      return {\n        currentImageIndex: 0,\n        lastIndex: nextProps.images.edges.length - 1,\n      };\n    } else return null;\n  }\n  // This method does not work as react renders twice. Initially it renders when it detects the props change, then after the state changes.\n  // componentDidUpdate(prevProps) {\n  // \t//this is needed so when the props is updated by the parent the state is updated as well. Otherwise lastindex remains the same as the initial props components lastIndex.\n  // \t// setState fails here as it is asynchronous\n  // \tif (prevProps.images.edges.length - 1 !== lastIndex) {\n  // \t\tthis.setState((state, props) => ({\n  // \t\t\t// currentImageIndex: 0,\n  // \t\t\tlastIndex: props.images.edges.length - 1\n  // \t\t}));\n  // \t}\n  // }\n  nextSlide() {\n    const lastIndex = this.state.lastIndex; //TODO: receive it from array length\n    const { currentImageIndex } = this.state;\n    const index = currentImageIndex === lastIndex ? 0 : currentImageIndex + 1;\n\n    this.setState({\n      currentImageIndex: index,\n    });\n  }\n  previousSlide() {\n    const lastIndex = this.state.lastIndex; // TODO receive it from array length of props\n    const { currentImageIndex } = this.state;\n    const index = currentImageIndex === 0 ? lastIndex : currentImageIndex - 1;\n\n    this.setState({\n      currentImageIndex: index,\n    });\n  }\n\n  render() {\n    console.log(\n      this.props.images.edges,\n      this.state.currentImageIndex,\n      this.state.lastIndex,\n      this.props\n    );\n    return (\n      <div\n        style={{\n          position: 'relative',\n        }}\n      >\n        <Img\n          fluid={\n            this.props.images.edges[this.state.currentImageIndex].node\n              .childImageSharp.fluid\n          }\n        />\n        <LeftArrow handleClick={this.previousSlide} glyph=\"&#9664;\" />\n        <RightArrow handleClick={this.nextSlide} glyph=\"&#9654;\" />\n      </div>\n    );\n  }\n}\n\nconst LeftArrow = ({ handleClick, glyph }) => (\n  <div\n    style={{\n      color: '#14B6D4',\n      cursor: 'pointer',\n      fontSize: '2rem',\n      position: 'absolute',\n      top: '50%',\n      left: '1rem',\n      //   height: '100%',\n    }}\n    onClick={handleClick}\n  >\n    {glyph}\n  </div>\n);\n\nconst RightArrow = ({ handleClick, glyph }) => (\n  <div\n    style={{\n      color: '#14B6D4',\n      cursor: 'pointer',\n      fontSize: '2rem',\n      position: 'absolute',\n      top: '50%',\n      right: '1rem',\n      minHeight: '40px',\n    }}\n    onClick={handleClick}\n  >\n    {glyph}\n  </div>\n);\n\nexport default ImageCarousel;\n","import React, { useState } from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport ImageCarousel from '../components/image-carousel';\n\nconst roomNames = ['Dorm', 'King', 'Garden', 'Shared', 'Patio'];\nconst roomsList = roomNames.map(room => <li key={room}>{room}</li>); // navigation list items\nconsole.log(roomsList);\nconst RoomImages = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      dormImages: allFile(filter: { name: { regex: \"/dorm[0-9]{2}/\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              fluid(maxWidth: 1000) {\n                ...GatsbyImageSharpFluid_tracedSVG\n              }\n            }\n          }\n        }\n      }\n      gardenImages: allFile(filter: { name: { regex: \"/garden[0-9]{2}/\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              fluid(maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      kingImages: allFile(filter: { name: { regex: \"/king[0-9]{2}/\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              fluid(maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      queenImages: allFile(filter: { name: { regex: \"/queen[0-9]{2}/\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              fluid(maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      sharedImages: allFile(filter: { name: { regex: \"/shared[0-9]{2}/\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              fluid(maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n      patioImages: allFile(filter: { name: { regex: \"/patio[0-9]{2}/\" } }) {\n        edges {\n          node {\n            childImageSharp {\n              fluid(maxWidth: 1000) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  const [room, setRoom] = useState(data.dormImages); //Default state is set here\n  const whichRoom = event => {\n    switch (event.target.innerText) {\n      case 'Dorm':\n        console.log(event.target.innerText, room);\n        setRoom(data.dormImages);\n        break;\n      case 'King':\n        setRoom(data.kingImages);\n        console.log(event.target.innerText);\n        break;\n      case 'Garden':\n        setRoom(data.gardenImages);\n        console.log(event.target.innerText);\n        break;\n      case 'Shared':\n        setRoom(data.sharedImages);\n        console.log(event.target.innerText);\n        break;\n      case 'Patio':\n        setRoom(data.patioImages);\n        console.log(event.target.innerText);\n        break;\n      default:\n        console.log('Does not work, try again.');\n    }\n  };\n  return (\n    <div>\n      <ul onClick={whichRoom}>{roomsList}</ul>\n      <p>Room Images</p>\n      <ImageCarousel images={room} />\n    </div>\n  );\n};\n\nexport default RoomImages;\n"],"sourceRoot":""}